
package hw3;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Random;
import api.Direction;
import api.Move;
import api.TilePosition;


/**
 * Utility class containing some elements of the basic logic for 
 * performing moves in a game of "Threes". 
 */
public class GameUtil
{  

	/**
	 * Constructor does nothing, since this object is stateless.
	 */
	public GameUtil()
	{
		// do nothing
	}


	/**
	 * Returns the result of merging the two given tile values, or zero
	 * if they can't be merged.  The rules are: a 1 can be merged with a 2, 
	 * and two values greater than 2 can be merged if they match.  The 
	 * result of a merge is always the sum of the tile values.
	 * @param a
	 *   given tile value
	 * @param b
	 *   given tile value
	 * @return
	 *   result of merging the two values, or zero if no merge is possible
	 */
	public int mergeValues(int a, int b)
	{
		if (a > 0 && b > 0 &&
				(a + b == 3) ||
				(a >= 3 && b == a))
		{
			return a + b;
		}
		else
		{
			return 0;
		}
	}
	/**
	 * @author Jamie Sampson
	 */
	/**
	 * Returns the score for a single tile value.  Tiles with value less 
	 * than 3 have score zero.  All other values result from starting with
	 * value 3 and doubling N times, for some N; the score is 3 to the power N + 1.
	 * For example: the value 48 is obtained from 3 by doubling N = 4 
	 * times (48 / 3 is 16, which is 2 to the 4th), so the score is 3 
	 * to the power 5, or 243.
	 * @param value
	 *   tile value for which to compute the score
	 * @return
	 *   score for the given tile value
	 */
	public int getScoreForValue(int value)
	{
		int score = 0;
		int n = 0;
		int x = 1;
		//if value is less then 3, then score is 0
		if(value < 3) {
			score = 0;
		}
		/*else divide the value by 3 and multiple x until x is 
    greater than value, then do 3 to the power of n+1 
    where n is the number of times x was multipled
		 */
		else {
			value = value / 3;
			while(x < value) {
				x = x * 2;
				n++;
			}
			score = (int) Math.pow(3.0, (double) (n + 1));
		}

		return score;
	}

	/**
	 * Returns a new size x size array with two nonzero cells.
	 * The nonzero cells consist of a 1 and a 2, placed randomly
	 * in the grid using the given Random instance.
	 * @param size
	 *   width and height of the new array
	 * @param rand
	 *   random number generator to use for positioning the nonzero cells
	 * @return
	 *   new size x size array
	 */
	public int[][] initializeNewGrid(int size, Random rand)
	{
		int[][] grid = new int[size][size];
		int numCells = size * size;

		// To select two distinct cells, think of the numCells cells as ordered
		// left to right within rows, with the rows ordered top to bottom.
		// First select two distinct integers between 0 and numCells
		int first = rand.nextInt(numCells);
		int second = rand.nextInt(numCells - 1);
		if (second >= first)
		{
			second += 1;
		}

		// Then, divide by size to get the row, mod by size to get column,
		// put a 1 in the first and a 2 in the other
		grid[first / size][first % size] = 1;
		grid[second / size][second % size] = 2;

		return grid;
	}

	/**
	 * Returns the total score for the given grid.  The grid
	 * is not modified.
	 * @param grid
	 *   given grid
	 * @return
	 *   sum of scores for the values in the grid
	 */
	public int calculateTotalScore(int[][] grid)
	{
		int total = 0;
		for (int row = 0; row < grid.length; ++row)
		{
			for (int col = 0; col < grid[0].length; ++col)
			{
				total += getScoreForValue(grid[row][col]);
			}
		}
		return total;
	}

	/**
	 * Makes a copy of the given 2D array.  The array
	 * must be nonempty and rectangular.
	 * @param grid
	 *   given 2D array to copy
	 * @return
	 *   copy of the given array
	 */
	public int[][] copyGrid(int[][] grid)
	{
		int[][] ret = new int[grid.length][grid[0].length];
		for (int row = 0; row < grid.length; ++row)
		{
			for (int col = 0; col < grid[0].length; ++col)
			{
				ret[row][col] = grid[row][col];
			}
		}
		return ret;
	}
	/**
	 * @author Jamie Sampson
	 */
	/**
	 * Generate a new tile value using the given instance
	 * of Random.  Values are generated such that there are
	 * 40% 1's, 40% 2's, 10% 3's, and 10% 6's.
	 * @param rand
	 *   random number generator to use
	 * @return
	 *   the value 1, 2, 3, or 6 with the specified probability
	 */
	public int generateRandomTileValue(Random rand)
	{
		//create a random number from 0 to 99
		int randomNum = rand.nextInt(100);
		//if the number is between 0 and 39 (ie. 40 numbers / 40%) then return 1
		if(randomNum <= 39) {
			return 1;
		}
		//if the number is between 40 and 79 (ie. 40 numbers / 40%) then return 2
		else if(randomNum <= 79) {
			return 2;
		}
		//if the number is between 80 and 89 (ie. 10 numbers / 10%) then return 3
		else if(randomNum <= 89) {
			return 3;
		}
		//else return 6
		else {
			return 6;
		}
	}
	/**
	 * @author Jamie Sampson
	 */
	/**
	 * Generates a position for a new tile.  The new position
	 * is on the side of the grid opposite that of the previous move and
	 * is randomly selected from available positions in the given grid.
	 * The value of the tile is zero (typically filled in later by an
	 * associated Game instance).  The given grid is not modified.  
	 * If <code>lastMove</code> is null, this method returns null.
	 * @param grid
	 *   given square array
	 * @param rand
	 *   random number generator to use
	 * @param lastMove
	 *   given direction
	 * @return
	 *   new tile position
	 */
	public TilePosition generateRandomTilePosition(int[][] grid, Random rand, Direction lastMove)
	{
		TilePosition tile;
		int row = 0;
		int col = 0;
		int i = 0;
		boolean isSpace = false;
		//checks for null case
		if(lastMove == null) {
			return null;
		}
		if(lastMove == Direction.LEFT || lastMove == Direction.RIGHT){
			//new tile is on right
			if(lastMove == Direction.LEFT){
				col = grid[0].length-1;
			}
			//new tile on left
			if(lastMove == Direction.RIGHT) { 
				col = 0;
			}
			//looks for next available row
			for(i = 0; i < grid.length -1; i++) {
				if(grid[i][col] == 0) {
					isSpace = true;
					break;
				}
			}
			if(isSpace) {
				while(grid[row][col] != 0) {
					row = rand.nextInt(grid.length);
				}
			}
			else {
				return null;
			}
		}

		if(lastMove == Direction.UP || lastMove == Direction.DOWN){
			//new tile on down
			if(lastMove == Direction.UP) {
				row = grid.length -1;
			}
			//new tile on up
			if(lastMove == Direction.DOWN) {
				row = 0;
			}
			for(i = 0; i < grid.length -1; i++) {
				if(grid[row][i] == 0) {
					isSpace = true;
					break;
				}
			}
			if(isSpace) {
				//looks for the next available col 
				while(grid[row][col] != 0) {
					col = rand.nextInt(grid[0].length);
				}
			}
			else {
				return null;
			}
		}
		return tile = new TilePosition(row, col, 0);
	}
	/**
	 * @author Jamie Sampson
	 */
	/**
	 * Shifts the array elements to the left according to the rules of the 
	 * Threes game. This method only operates on a one-dimensional array 
	 * of integers representing the tile values in one row or column.
	 * The Game class can use this method to shift a row or column in any 
	 * direction by copying that row or column, either forward or backward, 
	 * into a temporary one-dimensional array to be passed to this method. 
	 * The rules are that if there is a pair of adjacent cells
	 * that can be merged, and has no empty (zero) cells to its left,
	 * then the leftmost such pair of cells is merged and everything to 
	 * its right is shifted left by one cell. Otherwise, if there is an empty
	 * cell, then everything to the right of the leftmost empty cell is 
	 * shifted left by one cell. Otherwise, the array is unmodified and
	 * an empty list is returned.
	 * <p>
	 * The new value for a pair of merged cells
	 * is determined by the method <code>mergeValues</code>.
	 * The method returns a list of Move objects representing
	 * the moved cells.  All returned Move objects will have 
	 * unspecified row/column and direction (typically filled in later by
	 * the associated Game instance).  The list is in no particular order.
	 * 
	 * @param arr
	 *   array to be shifted
	 * @return
	 *   list of all moves and/or merges performed in the shift
	 */
	public ArrayList<Move> shiftArray(int[] arr)
	{
		//initalize new variables and array list of move objects
		ArrayList<Move> arrayMove = new ArrayList<Move>();
		int i = -1;
		int value = 0;
		int j = 0;

		//finds the first possible merge
		for(i = 0; i < arr.length -1; i++) {
			value = mergeValues(arr[i], arr[i+1]);
			if(value != 0) {
				break;
			}
		}
		//if it starts as the first value or doesn't have an empty before
		if (i == 0 || arr[i-1] != 0 && i != arr.length -1) {
			//creates the new move object for the merged value
			arrayMove.add(new Move(i+1,i,arr[i+1],arr[i], value));
			//change tile to merged value
			arr[i] = value;
			//goes through and moves all other numbers to the left by one
			//creates a move object and changes the array value
			for(j = i; j < arr.length-2; j++) {
				arr[j+1] = arr[j+2];
				if(arr[j+2] == 0) {
					break;
				}
				arrayMove.add(new Move(j+2,j+1,arr[j+2]));
			}
			//adds a zero at the end
			arr[arr.length-1] = 0;
			return arrayMove;
		}
		//does the same thing as above, except it only does the shifting part withouth merging values
		else if(arr[i-1] == 0 && i != arr.length -1) { //error with input of [0, 1, 2, 1] (repeats Move object "Move 2 to 1"
			for(j = i; j < arr.length-1; j++) {
				arrayMove.add(new Move(j,j-1,arr[j]));
				arrayMove.add(new Move(j+1,j, arr[j+1]));	
				arr[j-1] = arr[j];
				arr[j] = arr[j+1];
			}
			arr[arr.length-1] = 0;
			return arrayMove;
		}
		//case where nothing can be merged
		else if(i == (arr.length -1)) {
			//holds first value if it's not zero
			if(arr[0] == 0) {
				i = 0;
			}
			else {
				i = 1;
			}
			//moves all numbers to the left one and creates move objects
			for(j = i; j < arr.length-1; j++) {
				if(arr[j+1] != 0) {
					arrayMove.add(new Move(j+1,j,arr[j+1]));
					arr[j] = arr[j+1];
					arr[j+1] = 0;
				}
			}
			arr[arr.length-1] = 0;
			return arrayMove;
		}
		//do nothing if neither of the above are true
		else {
			return null;
		}
	}
}
